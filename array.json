[
    {
        "day": 1,
        "topic": "Array Basics & Initialization",
        "content": [
            {
                "concept": "What is an Array?",
                "about": "An array is a data structure that holds a fixed-size sequence of elements of the same type. Arrays store elements in contiguous memory locations, allowing constant-time access by index.",
                "example": "arr = [1, 2, 3, 4, 5]\nprint(arr[0])  # Output: 1",
                "description": "This initializes an array with 5 elements and accesses the first element using index 0. Indexing typically starts at 0.",
                "test_case": "Create an array [10, 20, 30, 40] and print the third element. Expected output: 30"
            }
        ],
        "practice_que": "https://www.geeksforgeeks.org/arrays-in-c-cpp/"
    },
    {
        "day": 2,
        "topic": "Traversing Arrays",
        "content": [
            {
                "concept": "Loop Through an Array",
                "about": "Traversing means visiting each element of the array, usually for printing or processing data.",
                "example": "arr = [1, 2, 3, 4, 5]\nfor i from 0 to length(arr) - 1:\n    print(arr[i])",
                "description": "A for-loop accesses and prints each item in the array by index.",
                "test_case": "Sum the elements of [5, 10, 15, 20] and print the result. Expected output: 50"
            }
        ],
        "practice_que": "Write a program to print all elements of an array using a loop."
    },
    {
        "day": 3,
        "topic": "Array Insertion and Deletion",
        "content": [
            {
                "concept": "Insert Element at Specific Index",
                "about": "Insertion involves adding a new element at a given index, shifting elements to the right.",
                "example": "arr = [1, 2, 4, 5]\nInsert 3 at index 2 → arr = [1, 2, 3, 4, 5]",
                "description": "Element 3 is inserted at position 2, and the remaining elements are shifted one index right.",
                "test_case": "Insert 100 at index 3 in [10, 20, 30, 40, 50]. Result should be: [10, 20, 30, 100, 40, 50]"
            },
            {
                "concept": "Delete Element at Specific Index",
                "about": "Deletion removes an element at a given index and shifts remaining elements left to fill the gap.",
                "example": "arr = [1, 2, 3, 4]\nDelete index 1 → arr = [1, 3, 4]",
                "description": "Element at index 1 (value 2) is deleted, and elements shift left to close the gap.",
                "test_case": "Delete the second element from [10, 20, 30, 40, 50]. Result: [10, 30, 40, 50]"
            }
        ],
        "practice_que": "https://www.geeksforgeeks.org/array-data-structure/"
    },
    {
    "day": 4,
    "topic": "Searching in Arrays",
    "content": [
      {
        "concept": "Linear and Binary Search",
        "about": "Searching helps find the index of an element. Linear search scans the whole array. Binary search is faster but requires sorted arrays.",
        "example": "arr = [1, 3, 5, 7, 9]\ntarget = 5\nBinary Search: found at index 2",
        "description": "Binary search divides the array into halves and narrows down the search space. Efficient: O(log n) vs O(n).",
        "test_case": "Search for 15 in [2, 4, 10, 15, 20] using binary search. Result: index 3"
      }
    ],
    "practice_que": "https://leetcode.com/problems/binary-search/"
  },
  {
    "day": 5,
    "topic": "Sorting Arrays",
    "content": [
      {
        "concept": "Bubble Sort and Built-in Sort",
        "about": "Sorting arranges elements in order (ascending/descending). Common in data organization.",
        "example": "arr = [5, 3, 2]\nBubble sort → [2, 3, 5]",
        "description": "Bubble sort repeatedly swaps adjacent elements if they’re in the wrong order. Use built-in methods for performance.",
        "test_case": "Sort [10, 3, 5, 1] and print. Result: [1, 3, 5, 10]"
      }
    ],
    "practice_que": "https://leetcode.com/problems/sort-an-array/"
  },
  {
    "day": 6,
    "topic": "Two Pointer Technique",
    "content": [
      {
        "concept": "Solving Problems with Two Pointers",
        "about": "Use two indices (left & right) to move toward or away from each other. Useful in sorted arrays.",
        "example": "arr = [1, 2, 4, 4]\ntarget = 8\nStart left=0, right=3 → 1+4=5 → move left",
        "description": "Pointers help avoid nested loops, reducing time complexity.",
        "test_case": "Find two numbers that sum to 9 in [1, 3, 5, 6]. Result: 3 + 6"
      }
    ],
    "practice_que": "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/"
  },
  {
    "day": 7,
    "topic": "Prefix Sum and Difference Arrays",
    "content": [
      {
        "concept": "Prefix Sum Array",
        "about": "Prefix sum stores cumulative totals. Useful in fast range sum queries.",
        "example": "arr = [1, 2, 3, 4]\nprefix = [1, 3, 6, 10]",
        "description": "Sum of index 1 to 3 = prefix[3] - prefix[0] = 10 - 1 = 9",
        "test_case": "Build prefix sum for [2, 4, 6, 8]. Query sum from index 1 to 3 → Output: 18"
      }
    ],
    "practice_que": "https://leetcode.com/problems/range-sum-query-immutable/"
  },
  {
    "day": 8,
    "topic": "Sliding Window Technique",
    "content": [
      {
        "concept": "Fixed-size Sliding Window",
        "about": "Used for contiguous subarrays. Avoids recalculating sums.",
        "example": "arr = [1, 3, 2, 6], k = 2\nwindows: [1,3], [3,2], [2,6]",
        "description": "Slide window by removing first element and adding next. Time: O(n).",
        "test_case": "Find max sum of 3-length window in [4, 2, 1, 7, 8]. Result: 16"
      }
    ],
    "practice_que": "https://leetcode.com/problems/maximum-average-subarray-i/"
  },
  {
    "day": 9,
    "topic": "Kadane’s Algorithm",
    "content": [
      {
        "concept": "Maximum Subarray Sum",
        "about": "Kadane’s finds the largest sum of a contiguous subarray in O(n) time.",
        "example": "arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nMax sum: 6 from [4, -1, 2, 1]",
        "description": "Track current max. Reset to 0 if it goes below 0. Return global max.",
        "test_case": "Use Kadane’s on [1, 2, -5, 4, 7]. Output: 11"
      }
    ],
    "practice_que": "https://leetcode.com/problems/maximum-subarray/"
  },
  {
    "day": 10,
    "topic": "Array Rotation",
    "content": [
      {
        "concept": "Rotate Array Right by k",
        "about": "Shift all elements right by k steps. Wrap elements around.",
        "example": "arr = [1, 2, 3, 4, 5], k=2\nOutput: [4, 5, 1, 2, 3]",
        "description": "Reverse parts of the array to avoid extra space.",
        "test_case": "Rotate [10, 20, 30, 40, 50] by 3 steps. Result: [30, 40, 50, 10, 20]"
      }
    ],
    "practice_que": "https://leetcode.com/problems/rotate-array/"
  },
  {
    "day": 11,
    "topic": "Merging Arrays",
    "content": [
      {
        "concept": "Merge Two Sorted Arrays",
        "about": "Combine two sorted arrays into one sorted array using two pointers.",
        "example": "arr1 = [1, 3, 5], arr2 = [2, 4, 6]\nOutput: [1, 2, 3, 4, 5, 6]",
        "description": "Compare elements from both arrays and insert the smaller one.",
        "test_case": "Merge [2, 5] and [1, 4, 6]. Result: [1, 2, 4, 5, 6]"
      }
    ],
    "practice_que": "https://leetcode.com/problems/merge-sorted-array/"
  },
  {
    "day": 12,
    "topic": "Dutch National Flag Problem",
    "content": [
      {
        "concept": "Sort 0s, 1s and 2s",
        "about": "Special case sorting in one pass using three pointers.",
        "example": "arr = [2, 0, 1, 2, 0] → [0, 0, 1, 2, 2]",
        "description": "Low, mid, and high pointers partition the array.",
        "test_case": "Sort [0, 1, 2, 1, 0]. Result: [0, 0, 1, 1, 2]"
      }
    ],
    "practice_que": "https://leetcode.com/problems/sort-colors/"
  },
  {
    "day": 13,
    "topic": "2D Arrays & Matrix Traversal",
    "content": [
      {
        "concept": "Row-wise & Column-wise Access",
        "about": "2D arrays store rows and columns. Nested loops are used for traversal.",
        "example": "matrix = [[1,2], [3,4]]\nOutput (row-wise): 1 2 3 4",
        "description": "Use matrix[i][j] to access the i-th row and j-th column.",
        "test_case": "Print each element of a 3x3 matrix: [[1,2,3],[4,5,6],[7,8,9]]"
      }
    ],
    "practice_que": "https://leetcode.com/problems/search-a-2d-matrix/"
  },
  {
    "day": 14,
    "topic": "Spiral and Diagonal Matrix Traversals",
    "content": [
      {
        "concept": "Spiral Traversal of Matrix",
        "about": "Visit matrix in spiral order (top row → right col → bottom row → left col).",
        "example": "matrix = [[1,2,3],[4,5,6],[7,8,9]]\nSpiral: 1 2 3 6 9 8 7 4 5",
        "description": "Use boundaries (top, bottom, left, right) to control direction.",
        "test_case": "Spiral print [[1,2],[3,4]]. Result: [1,2,4,3]"
      }
    ],
    "practice_que": "https://leetcode.com/problems/spiral-matrix/"
  },
  {
    "day": 15,
    "topic": "Subarrays and Subsets",
    "content": [
      {
        "concept": "Difference between Subarray and Subset",
        "about": "Subarrays are contiguous, subsets can be any combination. Use loops or bitmasks.",
        "example": "arr = [1,2,3]\nSubarrays: [1], [1,2], [1,2,3]...\nSubsets: [], [1], [2], [1,3]...",
        "description": "Subarray uses start-end pointers. Subset uses recursion or bitwise loops.",
        "test_case": "List all subsets of [1,2]. Output: [], [1], [2], [1,2]"
      }
    ],
    "practice_que": "https://leetcode.com/problems/subsets/"
  }

]
